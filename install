#!/usr/bin/env bash
#
# Run this script inside <magento_root> folder.
# Examples:
#  1. Curl way
#   curl -s https://raw.githubusercontent.com/swissup/scripts/master/install | bash
#   curl -s https://raw.githubusercontent.com/swissup/scripts/master/install | bash -s - -f swissup/swissup.argento-m2-1.7.0.zip
#  2. Wget way
#   wget https://raw.githubusercontent.com/swissup/scripts/master/install -qO - | bash
#   wget https://raw.githubusercontent.com/swissup/scripts/master/install -qO - | bash -s - -f swissup/swissup.argento-m2-1.7.0.zip
#
# The script will:
#
# 1. Unpack archives from `<magento_root>/swissup` into `vendor/swissup/artifacts`;
# 2. Move the modules that will be updated from `<magento_root>/app/code/Swissup` and
#    `<magento_root>/app/design/Swissup` files into `<magento_root>/swissup/backup`;
# 3. Configure composer artifacts and install the modules from `vendor/swissup/artifacts`;
# 4. Move archive from `<magento_root>/swissup` into `<magento_root>/swissup/installed` folder

set -o errexit
set -o pipefail

if [ ! -d "$(pwd)/vendor" ]; then
    echo "Vendor directory is not found. Are you in MAGENTO_ROOT folder?"
    exit 1
fi

if ! which unzip >/dev/null; then
    echo "Unzip command not found. Make sure you can use 'unzip' in terminal."
    exit 1
fi

function get_php_path {
    php_cmd=''
    php_cmds=(
        /usr/bin/php7.1
        /usr/bin/php7.0
        php
    )

    for path in "${php_cmds[@]}"; do
        if [ -x "$(command -v ${path})" ]; then
            php_cmd=$path
            break;
        fi
    done

    echo $php_cmd
}

## composer
composer_cmd=''
if which composer >/dev/null; then
    composer_cmd="composer"
else
    if [ -f "$(pwd)/composer.phar" ]; then
        php_cmd=$(get_php_path)
        if [[ $php_cmd ]]; then
            composer_cmd_prefixed="${php_cmd} composer.phar"
            if $composer_cmd_prefixed >/dev/null; then
                composer_cmd=$composer_cmd_prefixed
            fi
        fi
    fi
fi

if [[ ! $composer_cmd ]]; then
    echo "Composer command not found. Make sure you can use 'composer' in terminal."
    exit 1
fi

## bin/magento
magento_cmd=''
if [[ -x "bin/magento" ]]; then
    magento_cmd="bin/magento"
else
    php_cmd=$(get_php_path)
    if [[ $php_cmd ]]; then
        magento_cmd_prefixed="${php_cmd} bin/magento"
        if $magento_cmd_prefixed >/dev/null; then
            magento_cmd=$magento_cmd_prefixed
        fi
    fi
fi

if [[ ! $magento_cmd ]]; then
    echo "bin/magento command not found. Make sure you can use 'bin/magento' in terminal."
    exit 1
fi

while getopts ":f:d:l:" opt; do
    case $opt in
        f) file="$OPTARG"
        ;;
        d) deploy="$OPTARG"
        ;;
        l) locale="$OPTARG"
        ;;
        \?) echo "Supported options:"
            echo " -f filepath      -- path to archive"
            echo " -d false         -- do not run deploy and compilation (for production only)"
            echo " -l 'en_US en_GB' -- locales to use for deploy command"
            exit 1
        ;;
    esac
done

now=$(date '+%d-%m-%Y_%H-%M-%S')

## prepare directories
mkdir -p "vendor/swissup/artifacts"
mkdir -p "swissup/backup"
mkdir -p "swissup/installed"

archives=()
packages=()
codes=()

$magento_cmd maintenance:enable

for archive in swissup/*.zip; do
    [ -e "$archive" ] || continue

    ## skip archive if another one was requested in arguments
    if [[ ! -z "$file" && "$file" != "$archive" ]]; then
        continue
    fi

    ## skip invalidly formatted archives
    if [[ "$archive" != swissup/swissup.* ]]; then
        continue
    fi

    echo "Unzipping $archive into vendor/swissup/artifacts"
    unzip -oqq "$archive" -d "vendor/swissup/artifacts"

    ## move old files from app/code and app/design to the swissup/backup
    modules=($(unzip -Z1 "$archive" | tr "\n" " "))
    for module in "${modules[@]}"; do
        path="app"

        module="${module%-*}" # remove "-version.zip" suffix

        if [[ "$module" == module-* ]]; then
            path+="/code"
            module="${module#module-}" # remove "module-" prefix
            module="$(echo "$module" | sed -r 's/(^|-)(\w)/\U\2/g' )" # camelcase
            codes+=("Swissup_${module}")
        elif [[ "$module" == theme-frontend-* ]]; then
            path+="/design/frontend"
            module="${module#theme-frontend-}"  # remove "theme-frontend" prefix
        else
            continue
        fi

        path+="/Swissup"

        from="${path}/${module}"
        to="swissup/backup/${now}/${path}"

        if [ -d "$(pwd)/${from}" ]; then
            echo "  Moving ${from} into ${to}"
            rm -rf "${to}"
            mkdir -p "${to}"
            mv "${from}" "${to}"
        fi
    done

    ## generate package name to install
    package="${archive%-*}"   # remove "-version.zip" suffix
    package="${package#*/}"   # remove "swissup/" subfolder
    package="${package/.//}" # replace dot with slash to get proper package name

    packages+=("$package")
    archives+=("$archive")
done

if [ "${#packages[@]}" -eq 0 ]; then
    echo "Nothing to migrate."
else
    echo "Installing packages via composer command from artifacts directory"
    $composer_cmd config repositories.swissupartifacts artifact "$(pwd)/vendor/swissup/artifacts"
    echo "  ${composer_cmd} require ${packages[*]}"
    $composer_cmd require ${packages[*]}

    echo "Enable modules"
    $magento_cmd module:enable ${codes[*]}
    $magento_cmd setup:upgrade

    ## move archives into "installed" folder
    echo "Moving arhives into 'swissup/installed' folder"
    mkdir -p "swissup/installed/${now}"
    mv ${archives[*]} "swissup/installed/${now}"

    echo "Removing outdated static content files"
    rm -rf pub/static/_requirejs var/view_preprocessed pub/static/frontend/ pub/static/adminhtml/ generated/code/ 2> /dev/null || true

    if [[ -z "$deploy" || "$deploy" == "true" ]]; then
        mode=$(${magento_cmd} deploy:mode:show)
        if [[ "$mode" == *production* ]]; then
            echo "Deploying static content"
            if [[ -z "$locale" ]]; then
                $magento_cmd setup:static-content:deploy en_US
            else
                $magento_cmd setup:static-content:deploy $locale
            fi
            $magento_cmd setup:di:compile
        fi
    fi
fi

$magento_cmd maintenance:disable
echo "Done."
